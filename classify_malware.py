import os
import json
import pandas as pd
import matplotlib.pyplot as plt
from pprint import pprint
from collections import Counter

def rank_file_tags(d : str):
    """
    d : directory name for the files.
    """ 
    files = os.listdir(d)

    tags = []
    for f in files:
        path = os.path.join(d, f)
        with open(path, "r") as jf:
            data = json.load(jf)
        tags.append(data["data"]["attributes"]["tags"])

    count_res = Counter([tuple(tag) for tag in tags]).most_common(10)
    for tag in count_res:
        print(tag)

def rank_individual_file_tags(d : str):
    """
    d : directory name for the files.
    """ 
    files = os.listdir(d)

    tags = []
    for f in files:
        path = os.path.join(d, f)
        with open(path, "r") as jf:
            data = json.load(jf)
        tags.extend(data["data"]["attributes"]["tags"])

    count_res = Counter(tags).most_common(10)
    for tag in count_res:
        print(tag)

def rank_malware_types(d : str):

    files = os.listdir(d)

    results = {"categories" : [],
               "names" : [],
               "labels" : [],
               "undetected" : []}

    for f in files:
        path = os.path.join(d, f)
        with open(path, "r") as jf:
            data = json.load(jf)

        try:
            ptc = data["data"]["attributes"]["popular_threat_classification"]
        except KeyError:
            results["undetected"].append(data["data"]["attributes"]["sha256"])
            continue

        #if "popular_threat_category" in ptc:
        #    results["categories"].append(ptc["popular_threat_category"])
        #if "popular_threat_name" in ptc:
        #    results["names"].append(ptc["popular_threat_name"])
        if "suggested_threat_label" in ptc:
            results["labels"].append(ptc["suggested_threat_label"])

    count_res = Counter(results["labels"]).most_common(10)
    for label in count_res:
        print(label)

    print(f"Labeled malware: {len(results['labels'])}")
    print(f"Unlabeled malware: {len(results['undetected'])}")
    return results

def correlate_malware_file_type(d : str):

    files = os.listdir(d)

    results = {#"hash" : [],
               "malware_labels" : [],
               "file_types" : []}

    for f in files:
        path = os.path.join(d, f)
        with open(path, "r") as jf:
            data = json.load(jf)

        #results["hash"].append(data["data"]["attributes"]["sha256"])

        try:
            stl = data["data"]["attributes"]["popular_threat_classification"]["suggested_threat_label"]
        except KeyError:
            stl = ""

        results["malware_labels"].append(stl)

        try:
            te = data["data"]["attributes"]["type_extension"]
        except KeyError:
            te = ""

        results["file_types"].append(te)

    res = pd.DataFrame(results)

    res_g = res.groupby("file_types")
    for g_name, g in res_g:
        print(f"Name: {g_name}")
        count_res = Counter(g["malware_labels"]).most_common(2)
        for label in count_res:
            print(label)

def malware_difficulty(d : str):

    total_av_count = 74

    files = os.listdir(d)

    results = {"hash" : [],
               "labels" : [],
               "difficulty" : [],
               "file_types" : []}

    for f in files:
        path = os.path.join(d, f)
        with open(path, "r") as jf:
            data = json.load(jf)

        results["hash"].append(data["data"]["attributes"]["sha256"])

        try:
            stl = data["data"]["attributes"]["popular_threat_classification"]["suggested_threat_label"]
        except KeyError:
            stl = ""

        results["labels"].append(stl)

        try:
            te = data["data"]["attributes"]["type_extension"]
        except KeyError:
            te = ""

        results["file_types"].append(te)

        mal_count = data["data"]["attributes"]["last_analysis_stats"]["malicious"]

        results["difficulty"].append(mal_count/total_av_count)

    return pd.DataFrame(results)

d = "VirusShare_00389"
print("tags")
rank_file_tags(d)
print("tags indv")
rank_individual_file_tags(d)
print("malware types")
rank_malware_types(d)
print("correlate malware types")
correlate_malware_file_type(d)
print("malware difficulty")
res = malware_difficulty(d)
print(res)
print(res.sort_values(by="difficulty"))
print(res.groupby("labels").mean().sort_values(by="difficulty"))
print(res.groupby("file_types").mean().sort_values(by="difficulty"))
